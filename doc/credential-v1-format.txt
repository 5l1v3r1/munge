-------------------------------------------------------------------------------
 MUNGE Credential v1 Format
-------------------------------------------------------------------------------
 $Id: credential-v1-format.txt,v 1.1 2003/05/30 23:59:57 dun Exp $
-------------------------------------------------------------------------------


    +---+------------------------------------------------------------+---+
    |   | 08b : version number                                       |   |
    | O | 08b : cipher type (munge_cipher_t)                         | O |
    | U | 08b : compression type (munge_zip_t)                       | U |
    | T | 08b : message authentication code type (munge_mac_t)       | T |
    | E | 32b : length (in bytes) of security realm string           | E |
    | R | *** : security realm string (w/o terminating NUL)          | R |
    |   | *** : cipher IV (initialization vector)                    |   |
    +---+------------------------------------------------------------+---+
    |   | *** : MAC (message authentication code)                    |   |
    +---+------------------------------------------------------------+---+
    |   | 64b : salt                                                 |   |
    | I | 08b : length (in bytes) of the origin IP address           | I |
    | N | *** : origin IP address (where the credential was encoded) | N |
    | N | 32b : time at which the credential was encoded (time_t)    | N |
    | E | 32b : UID of the process requesting the credential         | E |
    | R | 32b : GID of the process requesting the credential         | R |
    |   | 32b : length (in bytes) of payload data                    |   |
    |   | *** : payload data being munged into the credential        |   |
    +---+------------------------------------------------------------+---+


 1. All 32b integers are converted to network byte order (ie, big endian).
 2. The length of the cipher IV is dependent on munge_cipher_t.
 3. The length of the MAC is dependent on munge_mac_t.
 4. The MAC is computed over the entire message (ie, OUTER + INNER).
 5. The INNER layer is then compressed according to munge_zip_t.
 6. The INNER layer is then encrypted according to munge_cipher_t.
 7. The entire message (ie, OUTER + INNER) is then base64 encoded.
 8. The base64 encoding is prepended with "MUNGE:" and appended with ":".
