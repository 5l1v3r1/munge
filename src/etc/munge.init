#!/bin/sh
###############################################################################
# $Id$
###############################################################################
# chkconfig:      345 40 60
###############################################################################
### BEGIN INIT INFO
# Provides:       munge
# Required-Start: $named $time
# Default-Start:  3 5
# Default-Stop:   0 1 2 6
# Description:    Start the MUNGE user authentication service.
### END INIT INFO
###############################################################################

SERVICE="MUNGE"
DAEMON="/usr/sbin/munged"

PATH=/sbin:/usr/sbin:/usr/local/sbin:/bin:/usr/bin:/usr/local/bin

[ -x "${DAEMON}" ] || exit 5

[ -f /etc/sysconfig/munge ] && source /etc/sysconfig/munge

###############################################################################

service_init ()
{
#  Determine the system type and initialize the environment.
#
#  Note that the shell positional parameters must be preserved when calling
#    this function in order for SuSE to initialize its environment properly.
#
  local RH_SUBSYS_BASENAME

  if test -f /etc/init.d/functions; then
    SYSTEM="REDHAT"
    source /etc/init.d/functions
    RH_SUBSYS_BASENAME="`echo $0 | perl -pe 's,(.*/)?([SK][0-9]{2})?(.*),$3,'`"
    RH_SUBSYS="/var/lock/subsys/${RH_SUBSYS_BASENAME}"
    INITLOG_ARGS=""                     # Disable RH suppression of stderr msgs
  elif test -f /etc/rc.status; then
    SYSTEM="SUSE"
    source /etc/rc.status
    rc_reset
  elif test -f /lib/lsb/init-functions; then
    SYSTEM="LSB"
    source /lib/lsb/init-functions
  else
    SYSTEM="UNKNOWN"
  fi
}

###############################################################################

service_fini ()
{
#  Return the exit status.
#
  case ${SYSTEM} in
    SUSE)
      rc_exit
      ;;
    LSB|REDHAT|*)
      exit $rc
      ;;
  esac
}

###############################################################################

service_start ()
{
# Start the service.  Required by LSB.
#
  echo -n "Starting ${SERVICE}: "
  case ${SYSTEM} in
    LSB)
      start_daemon ${DAEMON} ${OPTIONS} --force
      rc=$?
      [ $rc -eq 0 ] && log_success_msg || log_failure_msg
      ;;
    REDHAT)
      status ${DAEMON} >/dev/null
      rc=$?
      if [ $rc -ne 0 ]; then
        daemon ${DAEMON} ${OPTIONS} --force
        rc=$?
      fi
      echo
      [ $rc -eq 0 ] && touch ${RH_SUBSYS} 2>/dev/null
      ;;
    SUSE)
      startproc ${DAEMON} ${OPTIONS} --force
      rc_status -v
      ;;
    *)
      ${DAEMON} ${OPTIONS} --force 2>/dev/null
      rc=$?
      [ $rc -eq 0 ] && echo success || echo failure
      ;;
  esac
}

###############################################################################

service_stop ()
{
# Stop the service.  Required by LSB.
#
  echo -n "Stopping ${SERVICE}: "
  case ${SYSTEM} in
    LSB)
      killproc ${DAEMON}
      rc=$?
      [ $rc -eq 0 ] && log_success_msg || log_failure_msg
      ;;
    REDHAT)
      killproc ${DAEMON}
      rc=$?
      echo
      [ $rc -eq 0 ] && rm -f ${RH_SUBSYS} 2>/dev/null
      ;;
    SUSE)
      killproc ${DAEMON}
      rc_status -v
      ;;
    *)
      rc=4 # FIXME
      [ $rc -eq 0 ] && echo success || echo failure
      ;;
  esac
}

###############################################################################

service_restart ()
{
# Stop and restart the service if the service is already running,
#   otherwise start the service.  Required by LSB.
#
  $0 stop
  $0 start

  case ${SYSTEM} in
    SUSE)
      rc_status
      ;;
    LSB|REDHAT|*)
      rc=$?
      ;;
  esac
}

###############################################################################

service_try_restart ()
{
# Restart the service if the service is already running.  Optional for LSB.
#
  rc=0
  case ${SYSTEM} in
    REDHAT)
      [ -f ${RH_SUBSYS} ] && $0 restart || :
      rc=$?
      ;;
    SUSE)
      $0 status >/dev/null && $0 restart || :
      rc_status
      ;;
    LSB|*)
      $0 status >/dev/null && $0 restart || :
      rc=$?
      ;;
  esac
}

###############################################################################

service_reload ()
{
# Cause the configuration of the service to be reloaded without actually
#   stopping and restarting the service.  Optional for LSB.
#
  rc=4 # FIXME
  echo -n "Reloading ${SERVICE}: "
  case ${SYSTEM} in
    LSB)
      [ $rc -eq 0 ] && log_success_msg || log_failure_msg
      ;;
    REDHAT)
      echo_failure
      echo
      ;;
    SUSE)
      rc_failed $rc
      rc_status -v
      ;;
    *)
      [ $rc -eq 0 ] && echo success || echo failure
      ;;
  esac
}

###############################################################################

service_force_reload ()
{
# Cause the configuration of the service to be reloaded if the service supports
#   this, otherwise restart the service if it is running.  Required by LSB.
#
  $0 try-restart

  case ${SYSTEM} in
    SUSE)
      rc_status
      ;;
    LSB|REDHAT|*)
      rc=$?
      ;;
  esac
}

###############################################################################

service_status ()
{
# Print the current status of the service.  Required by LSB.
#
  case ${SYSTEM} in
    LSB)
      pids=`pidofproc ${DAEMON} 2>/dev/null`
      rc=$?
      if [ $rc -eq 0 ]; then
        echo "${DAEMON} (pid $pids) is running..."
      else
        echo "${DAEMON} is stopped"
      fi
      ;;
    REDHAT)
      status ${DAEMON}
      rc=$?
      ;;
    SUSE)
      echo -n "Checking for ${SERVICE}: "
      checkproc ${DAEMON}
      rc_status -v
      ;;
    *)
      rc=4 # FIXME
      [ $rc -eq 0 ] && echo success || echo failure
      ;;
  esac
}

###############################################################################

rc=4
service_init "$@"

case "$1" in
  start)
    service_start
    ;;
  stop)
    service_stop
    ;;
  restart)
    service_restart
    ;;
  try-restart|condrestart)
    service_try_restart
    ;;
  reload)
    service_reload
    ;;
  force-reload)
    service_force_reload
    ;;
  status)
    service_status
    ;;
  *)
    COMMANDS="start|stop|restart|try-restart|reload|force-reload|status"
    echo "Usage: $0 {${COMMANDS}}"
    exit 1
    ;;
esac

service_fini
