A Quick & Dirty Guide to MUNGE


  1. Install the software.

     A. Building RPMs.

        $ rpmbuild -ta munge-x.y.z.tar.bz2

        This should generate a single source RPM and three binary RPMs
        (munge, munge-devel, and munge-libs).  The munge RPM contains the
        daemon and client binaries.  The munge-devel RPM contains a header
        file and static library for developing applications using MUNGE.
        The munge-libs RPM contains a shared library for running applications
        using MUNGE.

     B. Building from source.

        Edit src/libcommon/munge_defs.h to customize values if necessary.
        Configuration file support is planned for future development.

        The MUNGED_SECRET_KEY default is "$sysconfdir/munge/munge.key".
        The "munge.key" file will need to be generated and distributed
        as detailed below.  This setting can be overridden on the munged
        command-line (munged --key-file /path/to/file).

        The MUNGED_RANDOM_SEED default is "$localstatedir/lib/munge/munge.seed".
        The "munge.seed" file will be automatically generated.

        The MUNGED_LOGFILE default is "$localstatedir/log/munge/munged.log".

        $ ./configure --prefix=/usr --sysconfdir=/etc --localstatedir=/var \
          && make && make install


  2. Create a secret key file.

     A. Wait around for some random data (recommended for the paranoid):
        dd if=/dev/random bs=1 count=1024 >munge.key

     B. Grab some pseudo random data (recommended for the impatient):
        dd if=/dev/urandom bs=1 count=1024 >munge.key

     C. Enter the hash of a password:
        echo -n "foo" | sha1sum | cut -d' ' -f1 >munge.key

     D. Enter a password (not recommended):
        echo "foo" >munge.key

     Ensure this file is permissioned 0400 and owned by the same user that
     the munged daemon will run as.  On most platforms, root privileges are
     not required for the daemon.

     Securely propagate the secret key file (e.g., via ssh) to other hosts
     within the same security realm.  Credentials are valid only within a
     security realm (i.e., on hosts sharing the same secret key).  All munged
     daemons exchanging credentials need to share the same secret key.


  3. Start the munged daemon on each host within the security realm.

     Invoke the daemon directly (/usr/sbin/munged) or use the init script
     (/etc/init.d/munge start).  The init script sources /etc/default/munge
     (found on Debian-based systems) and /etc/sysconfig/munge (found on
     RedHat-based systems), if present, to set variables recognized by the
     init script.  The $OPTIONS variable passes additional command-line
     options to the daemon; for example, this can be used to override the
     location of the secret key file (--key-file) or set the number of
     worker threads (--num-threads).  The $USER variable runs the daemon
     under the specified username; the "daemon" user is recommended.


  4. Test the installation.

     A. Generate a credential on stdout.

        $ munge -n

     B. Check if a credential can be locally decoded.

        $ munge -n | unmunge

     C. Check if a credential can be remotely decoded.

        $ munge -n | ssh somehost unmunge

     D. Run a quick benchmark.

        $ remunge

     If you encounter problems, ensure the munged process is running.
     Also check the munged logfile (/var/log/munge/munged.log) or try
     running munged in the foreground (/usr/sbin/munged --foreground).


  5. Munge credentials.

     Applications written in C/C++ can use the interface provided by
     <libmunge.h>.  Scripts can use the interface provided by the "munge" and
     "unmunge" executables -- specify "-h" or "--help" for usage information,
     or Read The Fine Manpages.

